
##############################################################
# This Script has been generated by Ixia ScriptGen
#      Software Version : IxOS 6.90.1150.9 EA         
##############################################################


package require registry
proc GetEnvTcl { product } {       
    set productKey     "HKEY_LOCAL_MACHINE\\SOFTWARE\\Ixia Communications\\$product"
    if { [ catch {
            set versionKey     [ registry keys $productKey ]
    } err ] } {
            return ""
    }        
    
    set latestKey      [ lindex $versionKey end ]
   if { $latestKey == "Multiversion" } {
      set latestKey   [ lindex $versionKey [ expr [ llength $versionKey ] - 2 ] ]
      if { $latestKey == "InstallInfo" } {
         set latestKey   [ lindex $versionKey [ expr [ llength $versionKey ] - 3 ] ]
      }
   } elseif { $latestKey == "InstallInfo" } {
        set latestKey   [ lindex $versionKey [ expr [ llength $versionKey ] - 2 ] ]
    }
    set installInfo    [ append productKey \\ $latestKey \\ InstallInfo ]            
    return             "[ registry get $installInfo  HOMEDIR ]/TclScripts/bin/ixiawish.tcl"   
}    

# IxOS is optional 
set ixPath [ GetEnvTcl IxOS ]
if { [file exists $ixPath] == 1 } {
    source $ixPath
    package require IxTclHal
}

# Command Option Mode - Full (generate full configuration)

proc IxStartPacketGroups {Chas Card Port} {
    configPacketGroup $Chas $Card $Port
    
    lappend portList [list $Chas $Card $Port]
    #--before we start packetgroups we should stop it first
    ixStopPacketGroups portList
    #--start packetgroups-based stats
    ixStartPacketGroups portList
}

proc IxStopPacketGroups {Chas Card Port} {
    lappend portList [list $Chas $Card $Port]
    
    #--stop packetgroups-based stats
    ixStopPacketGroups portList
}

proc configPacketGroup {Chas Card Port} {
    lappend portList [list $Chas $Card $Port]
    
    port get $Chas $Card $Port
    port config -receiveMode  [expr $::portCapture|$::portRxSequenceChecking|$::portRxModeWidePacketGroup|$::portRxModePerFlowErrorStats]
    if [ixWritePortsToHardware portList -noProtocolServer] {
        IxPuts -red "Can't write config to $Chas $Card $Port"
        set retVal 1   
    } 
    #-- configure stream as well as tx/rx mode
    set streamid   1
    set groupId    $streamid

    while {[stream get $Chas $Card $Port $streamid] != 1} {
        stream config -enableTimestamp  true
        stream config -name  _${Card}_${Port}_${streamid}
        if [stream set $Chas $Card $Port $streamid] {
            puts "Unable to set streams to IxHal!"
            set retVal 1
        }
        
        set groupId [expr $Card * 100 + $Port * 10 + $streamid]
        udf setDefault
        packetGroup setDefault
        packetGroup config -groupId $groupId
        packetGroup config -enableGroupIdMask true
        packetGroup config -enableInsertPgid true
        packetGroup config -groupIdMask 61440
        packetGroup config -insertSignature true
        packetGroup config -latencyControl interArrivalJitter
        packetGroup config -measurementMode packetGroupModeInterArrivalTime
        
        if {[packetGroup setTx $Chas $Card $Port $streamid ]} {
            puts "Error calling packetGroup setTx $Chas $Card $Port $streamid"
        } 
        if {[packetGroup setRx $Chas $Card $Port ]} {
            puts "Error calling packetGroup setRx $Chas $Card $Port"
        } 
        #autoDetectInstrumentation setDefault 
        #autoDetectInstrumentation config -enableTxAutomaticInstrumentation   true
        #if {[ eval autoDetectInstrumentation setTx $Chas $Card $Port $streamid ]} {
        #    puts "Error calling autoDetectInstrumentation on $Chas $Card $Port"
        #}
        #
        incr streamid
    }
    
    #ixSetAutoDetectInstrumentationMode portList
    if [ixWriteConfigToHardware portList -noProtocolServer] {
        IxPuts -red "Can't write config to $Chas $Card $Port"
        set retVal 1  
    }
       
    if { [ ixCheckLinkState portList ] } {
        puts "Link on one or more ports is down"
        return 1                            
    }       
}

proc SmbStreamStats  { Chas Card Port } {
    set m_portList [list 1 1 1]
    lappend m_portList [list 1 2 1]
    set retVal true
    set retList [list ]
    lappend retList $retVal,
    set txport $Card/$Port
    set streamid   1
    while {[stream get $Chas $Card $Port $streamid] != 1} {
        set name [stream cget -name]
        set groupId [expr $Card * 100 + $Port * 10 + $streamid]
        set rxChas ""
        set rxCard ""
        set rxPort ""
        set found false
        set streamStats ""
        foreach portList $m_portList {
            set rxChas [lindex $portList 0]
            set rxCard [lindex $portList 1]
            set rxPort [lindex $portList 2]
            #Don't use port itself as the receive side
            if {$rxChas == $Chas && $rxCard == $Card && $rxPort == $Port} {
                continue
            }
            set rxport $rxCard/$rxPort
            if {[packetGroupStats get $rxChas $rxCard $rxPort $groupId $groupId] != 1} {
                set totalFrames [ packetGroupStats cget -totalFrames ]
                if { $totalFrames == 0 } {
                    continue
                }
                set found true
                set minLatency [ packetGroupStats cget -minLatency ]
                set maxLatency [ packetGroupStats cget -maxLatency ]
                set maxminInterval [ packetGroupStats cget -maxminInterval ]
                set averageLatency [ packetGroupStats cget -averageLatency ]
                set totalByteCount [ packetGroupStats cget -totalByteCount ]
                set bitRate [ packetGroupStats cget -bitRate ]
                set byteRate [ packetGroupStats cget -byteRate ]
                set frameRate [ packetGroupStats cget -frameRate ]
                set readTimeStamp [ packetGroupStats cget -readTimeStamp ]
                set firstTimeStamp [ packetGroupStats cget -firstTimeStamp ]
                set lastTimeStamp [ packetGroupStats cget -lastTimeStamp ]
                
                set streamStats "$name,rxFrames $totalFrames"
                set streamStats "$streamStats $name,minLatency $minLatency"
                set streamStats "$streamStats $name,maxLatency $maxLatency"
                set streamStats "$streamStats $name,avgLatency $averageLatency"
                set streamStats "$streamStats $name,txport $txport"
                set streamStats "$streamStats $name,rxport $rxport"
                set streamStats "$streamStats $name,rxBitsRate $bitRate"
                set streamStats "$streamStats $name,rxFramesRate $frameRate"
            
                if {[streamTransmitStats get $Chas $Card $Port $streamid $streamid] != 1} {
                    set framesSent [streamTransmitStats cget -framesSent]
                    set txFramesRate [streamTransmitStats cget -frameRate]
                    set theoreticalAverageFrameRate [streamTransmitStats cget -theoreticalAverageFrameRate]
                    
                    set streamStats "$streamStats $name,txFrames $framesSent"
                    set streamStats "$streamStats $name,txFramesRate $txFramesRate"
                }
            } else {
                continue
            }
        }
        
        if { !$found } {
            set streamStats "$name,rxFrames 0"
            set streamStats "$streamStats $name,minLatency 0"
            set streamStats "$streamStats $name,maxLatency 0"
            set streamStats "$streamStats $name,avgLatency 0"
            set streamStats "$streamStats $name,txport $txport"
            set streamStats "$streamStats $name,rxBitsRate 0"
            set streamStats "$streamStats $name,rxFramesRate 0"
            set streamStats "$streamStats $name,txFrames 0"
            set streamStats "$streamStats $name,txFramesRate 0"
        }
        lappend retList $streamStats
        incr streamid
    }
    return $retList
}
    
source SmbStreamStats.tcl
set chassis 1
set card 1
set port 1
IxStartPacketGroups $chassis $card $port
lappend portList [list $chassis $card $port]
ixStartTransmit portList
after 10000
set chassis 1
set card 2
set port 1
IxStartPacketGroups $chassis $card $port
lappend portList [list $chassis $card $port]
ixStartTransmit portList
after 10000
set chassis 1
set card 1
set port 1
set stats1 [SmbStreamStats $chassis $card $port]
puts $stats1
set stats2 [SmbStreamStats $chassis 2 $port]
puts $stats2
IxStopPacketGroups $chassis $card $port
after 10000
set chassis 1
set card 2
set port 1
IxStopPacketGroups $chassis $card $port
#SetIGMPv1Group 225.0.0.1 100 JOIN 100 2 1.1.1.1 9999-9999-9999
#SetIGMPv2Group 225.0.0.1 100 JOIN 100 2 1.1.1.1 9999-9999-9999